from typing import Generic, Iterable, List, Tuple, TypeVar, Union, overload
from more import SequenceView

T = TypeVar("T")
U = TypeVar("U")

def spy(
    iterable: Iterable[T], n: int = ...
) -> Tuple[Tuple[Iterable[T], ...], Iterable[T]]: ...

class peek(Generic[T]):
    def __init__(self, iterable: Iterable[T]): ...
    def __iter__(self) -> peek[T]: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(
        self
    ) -> bool: ...  # Probably should delete this because it's only py2
    @overload
    def peek(self) -> peek[T]: ...
    @overload
    def peek(self, default: U) -> Union[T, U]: ...
    def prepend(self, *items: T): ...
    def __next__(self) -> T: ...
    @overload
    def __getitem__(self, index: int) -> T: ...
    @overload
    def __getitem__(self, index: slice) -> List[T]: ...

class seekable(Generic[T]):
    def __init__(self, iterable: Iterable[T]): ...
    def __iter__(self) -> seekable[T]: ...
    def __next__(self) -> T: ...
    def elements(
        self
    ) -> SequenceView[T]: ...  # TODO: annotate the generic SequenceView
    def seek(self, index: int) -> Iterable[T]: ...
