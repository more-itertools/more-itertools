# Stubs for more_itertools.recipes (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def accumulate(iterable: Any, func: Any = ...): ...
def take(n: Any, iterable: Any): ...
def tabulate(function: Any, start: int = ...): ...
def tail(n: Any, iterable: Any): ...
def consume(iterator: Any, n: Optional[Any] = ...) -> None: ...
def nth(iterable: Any, n: Any, default: Optional[Any] = ...): ...
def all_equal(iterable: Any): ...
def quantify(iterable: Any, pred: Any = ...): ...
def padnone(iterable: Any): ...
def ncycles(iterable: Any, n: Any): ...
def dotproduct(vec1: Any, vec2: Any): ...
def flatten(listOfLists: Any): ...
def repeatfunc(func: Any, times: Optional[Any] = ..., *args: Any): ...
def pairwise(iterable: Any): ...
def grouper(iterable: Any, n: Any, fillvalue: Optional[Any] = ...): ...
def roundrobin(*iterables: Any) -> None: ...
def partition(pred: Any, iterable: Any): ...
def powerset(iterable: Any): ...
def unique_everseen(iterable: Any, key: Optional[Any] = ...) -> None: ...
def unique_justseen(iterable: Any, key: Optional[Any] = ...): ...
def iter_except(func: Any, exception: Any, first: Optional[Any] = ...) -> None: ...
def first_true(iterable: Any, default: Optional[Any] = ..., pred: Optional[Any] = ...): ...
def random_product(*args: Any, **kwds: Any): ...
def random_permutation(iterable: Any, r: Optional[Any] = ...): ...
def random_combination(iterable: Any, r: Any): ...
def random_combination_with_replacement(iterable: Any, r: Any): ...
def nth_combination(iterable: Any, r: Any, index: Any): ...
def prepend(value: Any, iterator: Any): ...
