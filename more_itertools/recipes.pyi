# Stubs for more_itertools.recipes (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Callable, Iterable, Optional, TypeVar, overload

T = TypeVar("T")
U = TypeVar('U')

def accumulate(iterable: Any, func: Any = ...): ...
def take(n: Any, iterable: Any): ...
def tabulate(function: Any, start: int = ...): ...
def tail(n: Any, iterable: Any): ...
def consume(iterator: Any, n: Optional[Any] = ...) -> None: ...
def nth(iterable: Any, n: Any, default: Optional[Any] = ...): ...
def all_equal(iterable: Any): ...
def quantify(iterable: Any, pred: Any = ...): ...
def padnone(iterable: Any): ...
def ncycles(iterable: Any, n: Any): ...
def dotproduct(vec1: Any, vec2: Any): ...
def flatten(listOfLists: Any): ...
def repeatfunc(func: Any, times: Optional[Any] = ..., *args: Any): ...
def pairwise(iterable: Any): ...
def grouper(iterable: Any, n: Any, fillvalue: Optional[Any] = ...): ...
def roundrobin(*iterables: Any) -> None: ...
def partition(pred: Any, iterable: Any): ...
def powerset(iterable: Any): ...

@overload
def unique_everseen(iterable: Iterable[T]) -> Iterable[T]: ...
@overload
def unique_everseen(iterable: Iterable[T], key: Callable[[T], U]) -> Iterable[T]: ...

def unique_justseen(iterable: Any, key: Optional[Any] = ...): ...
def iter_except(func: Any, exception: Any, first: Optional[Any] = ...) -> None: ...

@overload
def first_true(iterable: Iterable[T], *, pred: Optional[Callable[[T], bool]] = None) -> Optional[T]: ...
# Technically the default value could be of any type, but that is a strange use case and would make
# the signature to return a Union[T, U] which is discouraged by mypy, as afterwards, the only
# thing you could do is to do an isinstance check.
@overload
def first_true(iterable: Iterable[T], default: T, pred: Optional[Callable[[T], bool]] = None) -> T: ...

def random_product(*args: Any, **kwds: Any): ...
def random_permutation(iterable: Any, r: Optional[Any] = ...): ...
def random_combination(iterable: Any, r: Any): ...
def random_combination_with_replacement(iterable: Any, r: Any): ...
def nth_combination(iterable: Any, r: Any, index: Any): ...
def prepend(value: Any, iterator: Any): ...
